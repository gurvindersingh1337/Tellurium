package vestige.module.impl.exploit;

import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import vestige.Vestige;
import vestige.event.Listener;
import vestige.event.impl.*;
import vestige.module.Category;
import vestige.module.Module;
import vestige.module.impl.movement.Speed;
import vestige.setting.impl.BooleanSetting;
import vestige.setting.impl.DoubleSetting;
import vestige.setting.impl.IntegerSetting;
import vestige.setting.impl.ModeSetting;
import vestige.util.misc.TimerUtil;
import vestige.util.network.PacketUtil;
import vestige.util.world.WorldUtil;

import java.util.ArrayList;

public class Disabler extends Module {

    private final ModeSetting mode = new ModeSetting("Mode", "Watchdog inventory", "Watchdog inventory", "Watchdog strafe silent", "Pingspoof", "Custom");

    private final BooleanSetting strict = new BooleanSetting("Strict", () -> mode.is("Watchdog strafe silent"), false);
    private final IntegerSetting blinkTicks = new IntegerSetting("Blink ticks", () -> mode.is("Watchdog strafe silent"), 10, 3, 14, 1);

    private final IntegerSetting delay = new IntegerSetting("Delay", () -> mode.is("Pingspoof"), 500, 50, 4000, 50);
    private final BooleanSetting s08 = new BooleanSetting("S08", () -> mode.is("Pingspoof"), false);

    private final BooleanSetting balance = new BooleanSetting("Balance", () -> mode.is("Custom"), true);
    private final BooleanSetting noSprint = new BooleanSetting("No Sprint", () -> mode.is("Custom"), false);
    private final BooleanSetting noSneak = new BooleanSetting("No Sneak", () -> mode.is("Custom"), false);

    private final BooleanSetting silentTeleportAccept = new BooleanSetting("Silent teleport accept", () -> mode.is("Custom"), false);
    private final DoubleSetting silentRange = new DoubleSetting("Silent range", () -> mode.is("Custom") && silentTeleportAccept.isEnabled(), 8, 0.25, 20, 0.25);

    private Speed speedModule;

    private final TimerUtil timer = new TimerUtil();

    private final ArrayList<Packet> packetsQueue = new ArrayList<>();

    private boolean started;

    private int groundSpoofTicks, ticks;

    private double motionX, motionZ;
    private double lastMotionX, lastMotionZ;

    private boolean blinking;

    public Disabler() {
        super("Disabler", Category.EXPLOIT);
        this.addSettings(mode, strict, blinkTicks, delay, s08, balance, noSprint, noSneak, silentTeleportAccept, silentRange);
    }

    @Override
    public void onEnable() {
        started = false;
        groundSpoofTicks = ticks = 0;
    }

    @Override
    public void onDisable() {
        if(!packetsQueue.isEmpty()) {
            for(Packet packet : packetsQueue) {
                PacketUtil.sendPacketNoEvent(packet);
            }

            packetsQueue.clear();
        }

        Vestige.instance.getPacketBlinkHandler().stopAll();
        Vestige.instance.getPacketDelayHandler().stopAll();
    }

    @Override
    public void onClientStarted() {
        speedModule = Vestige.instance.getModuleManager().getModule(Speed.class);
    }

    @Listener
    public void onReceive(PacketReceiveEvent event) {
        switch (mode.getMode()) {
            case "Pingspoof":
                if(s08.isEnabled()) {
                    Vestige.instance.getPacketBlinkHandler().startBlinkingAll();
                    blinking = true;
                    timer.reset();
                }
                break;
            case "Custom":
                if(event.getPacket() instanceof S08PacketPlayerPosLook) {
                    S08PacketPlayerPosLook packet = event.getPacket();

                    if(silentTeleportAccept.isEnabled() && mc.getNetHandler().doneLoadingTerrain) {
                        if(mc.thePlayer.getDistance(packet.getX(), packet.getY(), packet.getZ()) < silentRange.getValue()) {
                            event.setCancelled(true);
                            PacketUtil.sendPacket(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), false));
                        }
                    }
                }
                break;
        }
    }

    @Listener
    public void onSend(PacketSendEvent event) {
        if(mc.thePlayer == null) return;

        switch (mode.getMode()) {
            case "Custom":
                if(balance.isEnabled()) {
                    if(event.getPacket() instanceof C03PacketPlayer) {
                        C03PacketPlayer packet = event.getPacket();

                        if(!packet.isMoving() && !packet.getRotating()) {
                            if(mc.thePlayer.posX - mc.thePlayer.lastTickPosX == 0 && mc.thePlayer.posY - mc.thePlayer.lastTickPosY == 0 && mc.thePlayer.posZ - mc.thePlayer.lastTickPosZ == 0) {
                                event.setCancelled(true);
                            }
                        }
                    }
                }
                break;
            case "Watchdog inventory":
                if(event.getPacket() instanceof C16PacketClientStatus || event.getPacket() instanceof C0EPacketClickWindow) {
                    event.setCancelled(true);
                    packetsQueue.add(event.getPacket());
                } else if(event.getPacket() instanceof C0DPacketCloseWindow) {
                    if(!packetsQueue.isEmpty()) {
                        for(Packet packet : packetsQueue) {
                            PacketUtil.sendPacketNoEvent(packet);
                        }

                        packetsQueue.clear();
                    }
                }
                break;
        }
    }

    @Listener
    public void onEntityAction(EntityActionEvent event) {
        if(noSprint.isEnabled()) {
            event.setSprinting(false);
        }

        if(noSneak.isEnabled()) {
            event.setSneaking(false);
        }
    }

    @Listener
    public void onMove(MoveEvent event) {
        lastMotionX = motionX;
        lastMotionZ = motionZ;

        motionX = event.getX();
        motionZ = event.getZ();
    }

    @Listener
    public void onMotion(MotionEvent event) {
        switch (mode.getMode()) {
            case "Watchdog strafe silent":
                if(mc.thePlayer.ticksExisted < 20) {
                    groundSpoofTicks = ticks = 0;
                }

                boolean usingStrafelessSpeed = speedModule.isEnabled(); // replaced with myau speed

                if(speedModule.isEnabled() && !usingStrafelessSpeed && !mc.thePlayer.onGround) {
                    if(++ticks >= 2 && mc.thePlayer.fallDistance < 1 && WorldUtil.isBlockUnder(8)) {
                        boolean canGroundSpoof = false;

                        double diff = strict.isEnabled() ? 0.034 : 0.098;

                        double lastX = lastMotionX * 0.91F;
                        double lastZ = lastMotionZ * 0.91F;

                        if(motionX - lastX > diff) {
                            canGroundSpoof = true;
                        } else if(motionX - lastX < -diff) {
                            canGroundSpoof = true;
                        } else if(motionZ - lastZ > diff) {
                            canGroundSpoof = true;
                        } else if(motionZ - lastZ < -diff) {
                            canGroundSpoof = true;
                        }

                        if(canGroundSpoof) {
                            event.setOnGround(true);

                            if(groundSpoofTicks == 1) {
                                groundSpoofTicks = blinkTicks.getValue() + 1;
                                Vestige.instance.getPacketBlinkHandler().releaseMove();
                                Vestige.instance.getPacketBlinkHandler().releaseOther();
                            } else if(groundSpoofTicks < 1) {
                                groundSpoofTicks = blinkTicks.getValue() + 1;
                            }
                            ticks = 0;

                            Vestige.instance.getPacketBlinkHandler().startBlinkingMove();
                            Vestige.instance.getPacketBlinkHandler().startBlinkingOther();
                            blinking = true;
                        }
                    }
                } else {
                    ticks = 0;
                }

                if(groundSpoofTicks == 1 && blinking) {
                    Vestige.instance.getPacketBlinkHandler().stopAll();
                    blinking = false;
                }

                groundSpoofTicks--;
                break;
            case "Pingspoof":
                if(timer.getTimeElapsed() >= delay.getValue()) {
                    if(blinking) {
                        Vestige.instance.getPacketBlinkHandler().releaseAll();
                        blinking = false;
                    } else {
                        Vestige.instance.getPacketBlinkHandler().releasePing();
                    }

                    timer.reset();
                }

                Vestige.instance.getPacketBlinkHandler().startBlinkingPing();
                break;
        }
    }

    @Override
    public String getSuffix() {
        return mode.getMode();
    }

}
